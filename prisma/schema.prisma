// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // 使用bcrypt哈希存储
  name          String?
  avatar        String?
  role          UserRole  @default(USER)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联
  favorites     Product[]     @relation("UserFavorites")
  searches      Search[]
  comparisons   Comparison[]
  notifications Notification[]
  sessions      Session[]
  alerts        PriceAlert[]

  // 订阅相关
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

// 会话模型
model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  device       String?
  ip           String?
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// 订阅模型
model Subscription {
  id        String   @id @default(cuid())
  type      SubType
  startDate DateTime @default(now())
  endDate   DateTime
  status    SubStatus @default(ACTIVE)
  users     User[]

  @@map("subscriptions")
}

enum SubType {
  BASIC
  PRO
  BUSINESS
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

// 产品模型
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  category    String
  brand       String?
  model       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联
  prices        Price[]
  favoriteUsers User[]      @relation("UserFavorites")
  comparisons   Comparison[]
  alerts        PriceAlert[]

  @@map("products")
}

// 价格模型
model Price {
  id        String   @id @default(cuid())
  price     Float
  currency  String
  platform  String
  url       String
  inStock   Boolean  @default(true)
  createdAt DateTime @default(now())

  // 关联
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("prices")
}

// 搜索历史
model Search {
  id        String   @id @default(cuid())
  query     String
  filters   Json?
  createdAt DateTime @default(now())

  // 关联
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("searches")
}

// 比较历史
model Comparison {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // 关联
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  products Product[]

  @@map("comparisons")
}

// 价格提醒
model PriceAlert {
  id            String      @id @default(cuid())
  targetPrice   Float
  currency      String
  status        AlertStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // 关联
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("price_alerts")
}

enum AlertStatus {
  ACTIVE
  TRIGGERED
  DISABLED
}

// 通知模型
model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())

  // 关联
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

enum NotificationType {
  PRICE_ALERT
  STOCK_ALERT
  SYSTEM
  DEAL
}